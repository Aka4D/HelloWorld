@page "/getimage"

@using Newtonsoft.Json
@using System.Text
@using System.Net.Http.Headers
@using Newtonsoft.Json.Linq
@using System.IO;
@using System.Windows


<h3>GetImage</h3>

@if (getAnswerError)
{
    <p>Unable to get an answer from Proffix. Please try again later.</p>
}
else
{
    <br />
    <p>Session-ID: @session</p>
    <br />
    <p>DateiNr: @meta1</p>

    <img src="bild.png" asp-append-version="true" width="1000px" />

    <img src="@imageDataURL">
}

@code {
    private bool getAnswerError;
    private bool shouldRender = true;
    public string session;
    public string meta1;
    public string meta2;
    public string imageDataURL;

    protected override async Task OnInitializedAsync()
    {
        await GetSessionId();
        await GetDateiNr();
        await GetImages();
    }

    public async Task GetSessionId()
    {
        // define Logindata for authentification
        var login = new Login("Admin", "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918", new Datenbank("DEMODB"), new List<string> { "VOL" });

        // make json
        var json = JsonConvert.SerializeObject(login);
        var data = new StringContent(json, Encoding.UTF8, "application/json");

        // define url
        var url = "https://dev.wato-soft.ch:44341/pxapi/v4/PRO/Login";
        var client = new HttpClient();


        HttpResponseMessage response = await client.PostAsync(url, data);

        //var sessionId = GetSessionID(response);

        HttpHeaders headers = response.Headers;

        // Read session key header
        if (headers.TryGetValues("PxSessionId", out var values))
        {
            // return session key
            session = values.First();
        }
        else
        {
            getAnswerError = true;
        }
    }

    public async Task GetDateiNr()
    {
        var url2 = "https://dev.wato-soft.ch:44341/pxapi/v4/LAG/Artikelbild/2";
        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("PxSessionId", session);

        HttpResponseMessage response2 = await client.GetAsync(url2);

        HttpContent httpContent = response2.Content;

        string jsonContent = httpContent.ReadAsStringAsync().Result;

        JObject result = JObject.Parse(jsonContent);

        var DateiNr = result["DateiNr"];


        meta1 = DateiNr.ToString();

        Console.Write("");

    }

    public async Task GetImages()
    {
        var url3 = "https://dev.wato-soft.ch:44341/pxapi/v4/PRO/Datei/" + meta1;
        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("PxSessionId", session);

        HttpResponseMessage response3 = await client.GetAsync(url3);
        //Read Bitarray to Stream for image
        var contentstream = await response3.Content.ReadAsStreamAsync();

        byte[] bytes;
        // Create a new instance of memorystream
        var memoryStream = new MemoryStream();
        // Use the .CopyTo() method and write current filestream to memory stream
        contentstream.CopyTo(memoryStream);
        // Convert Stream To Byte
        bytes = memoryStream.ToArray();
        // Convert Byte To Base64
        string base64 = Convert.ToBase64String(bytes);

        imageDataURL = string.Format("data:image/png;base64,{0}", base64);

        Console.Write("");


        /*
        To Create a file and fill it with the Filestream
        using (var fileStream = File.Create(@"C:\Users\akg\source\Repos\HelloWorld\HelloWorld\wwwroot\bild.png"))
        {
            contentstream.CopyTo(fileStream);
        }
        */
    }

}

